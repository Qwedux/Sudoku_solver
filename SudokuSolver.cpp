#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define s second
#define f first
#define deb if(0)

template <class T, class U> ostream& operator<<(ostream& os, const pair<T,U>& A){
	os << "[" << A.f << "," << A.s << "]";
	return os;
}
template <class T> ostream& operator<<(ostream& os, const vector<T>& A){//aby si mohol vypisovat vektor
	deb os << "{";
	for(ll i = 0; i < A.size(); i+= 1){os << A[i]; if(i != A.size()-1)os << " ";}
	deb os << "}";
	cout << endl;
	return os;
}
template <class T, class U> istream& operator>>(istream&is, pair<T,U>& A){
	is >> A.f >> A.s;
	return is;
}
template <class T> istream& operator>>(istream& is, vector<T>& A){
	for(auto &i:A)is >> i;
	return is;
}

void row(ll x, ll y, ll val, vector<vector<vector<char>>> &possibilities){
	for(int i = 0; i < 9; i++){
		possibilities[x][i][val-'1'] = '.';
	}
}

void col(ll x, ll y, ll val, vector<vector<vector<char>>> &possibilities){
	for(int i = 0; i < 9; i++){
		possibilities[i][y][val-'1'] = '.';
	}
}

void sqr(ll x, ll y, ll val, vector<vector<vector<char>>> &possibilities){
	x = (x/3)*3+1;
	y = (y/3)*3+1;
	for(int i = -1; i <= 1; i++){
		for(int j = -1; j <= 1; j++){
			possibilities[x+i][y+j][val-'1'] = '.';
		}
	}
}
bool check(vector<vector<char>> X){
	for(ll i = 0; i < 9; i++){
		vector<ll> obs(9, 0);
		for(ll j = 0; j < 9; j++){
			if(X[i][j] != '.'){
				if(obs[X[i][j]-'1']) return 0;
				else obs[X[i][j]-'1'] = 1;
			}
		}
		obs = vector<ll>(9, 0);
		for(ll j = 0; j < 9; j++){
			if(X[j][i] != '.'){
				if(obs[X[j][i]-'1']) return 0;
				else obs[X[j][i]-'1'] = 1;
			}
		}
	}
	for(ll i = 1; i <= 7; i += 3){
		for(ll j = 1; j  <= 7; j+=3){
			vector<ll> obs(9, 0);
			for(ll x = -1; x <= 1; x++){
				for(ll y = -1; y <= 1; y++){
					if(X[i+x][j+y] != '.'){
						if(obs[X[i+x][j+y]-'1']) return 0;
						else obs[X[i+x][j+y]-'1'] = 1;
					}
				}
			}
		}
	}
	return 1;
}

vector<vector<char>> solve(vector<vector<char>> Sudoku, queue<vector<ll>> prejdi, vector<vector<vector<char>>> possibilities){
	char xdxd;
	vector<ll> min_occ = vector<ll>{-1, -1, 100};
	vector<vector<ll>> onl_one;
	do{
		while(!prejdi.empty()){
			auto akt = prejdi.front();
			prejdi.pop();
			possibilities[akt[0]][akt[1]] = vector<char>(9, '.');
			row(akt[0], akt[1], akt[2], possibilities);
			col(akt[0], akt[1], akt[2], possibilities);
			sqr(akt[0], akt[1], akt[2], possibilities);
		}
		onl_one.clear();
		min_occ = vector<ll>{-1, -1, 100};
		for(ll i = 0; i < 9; i++){
			for(ll j = 0; j < 9; j++){
				ll nums = 0;
				ll last = 0;
				for(ll k = 0; k < 9; k++){
					if(possibilities[i][j][k] != '.'){
						last = k;
						nums++;
					}
				}
				if(nums > 0 and nums < min_occ[2]){
					min_occ = vector<ll>{i,j,nums};
				}
				if(nums == 1){
					onl_one.push_back(vector<ll>{i,j, possibilities[i][j][last]});
				}
				if(nums == 0 and Sudoku[i][j] == '.'){
					return vector<vector<char>>{{'f','k','u','r','s','l','f'}};
				}
			}
		}
		if(onl_one.size() > 0){
			for(auto const&x:onl_one){
				Sudoku[x[0]][x[1]] = x[2];
				prejdi.push(vector<ll>{x[0], x[1], Sudoku[x[0]][x[1]]});
			}
		}
	}while(onl_one.size() > 0);
	if (!check(Sudoku))
		return vector<vector<char>>{{'f','k','u','r','s','l','f'}};
	bool solved = 1;
	for(auto const&i:Sudoku)
		for(auto const&j:i)
			if(j == '.')
				solved = 0;
	if(solved){
		return Sudoku;
	}
	auto res = vector<vector<char>>{{'f','k','u','r','s','l','f'}};
	for(ll i = 0; i < 9; i++){
		if(possibilities[min_occ[0]][min_occ[1]][i] != '.'){
			auto s = Sudoku;
			auto p = prejdi;
			auto pos = possibilities;
			s[min_occ[0]][min_occ[1]] = char(i+'1');
			p.push(vector<ll>{min_occ[0], min_occ[1], i+'1'});
			pos[min_occ[0]][min_occ[1]] = vector<char>(9, '.');
			auto tmp = solve(s, p, pos);
			if(tmp != vector<vector<char>>{{'f','k','u','r','s','l','f'}}){
				res = tmp;
				return res;
			}
		}
	}
	return res;
}

void Print_Sudoku(auto res){
	for(ll i = 0; i < 9; i++){
		if(i%3 == 0 and i > 0){cout << "-"; for(ll j = 0; j < 21; j++){if(j == 6 or j == 14){cout << "|";}else{cout << "-";}} cout << "-" << endl << " ";}
		else{cout << " ";}
		for(ll j = 0; j < 9; j++){
			if(j % 3 == 0 && j > 0){
				cout << "| ";
			}
			cout << res[i][j];
			if(j < 8){cout << " ";}
		}
		cout << endl;
	}
}

// Example inputs
//.......12........3..23..4....18....5.6..7.8.......9.....85.....9...4.5..47...6...
//.5...293....1.4...469..5...3..75...1......8...8..1..4613....52....3.9...7........
//.4.37..5.8....96.496.......2...581........5.9.342......9.........17..8......4..3.
//74.9.8...........685..17...........4.2.4......71...9.....58..2..62.798..5...2.... random expert
//...423.......5....45.98.1...3....7....5..1..8..78....45...9.....1.3..9...23....5. random expert
//.7..9.........58....932.1.63.1..9...86.......7..1...35....6..596.3.1.........8... random expert
//..8............534..5.46..94...3.81....16..5...7...4..16...8...8.3.5...........7. random expert
//..1....49.48......6....58.22..9.......4..6...91.548....7...96....68...5...97..... random expert
//.6.....95.4.1...2..7.28.1..9.5.3...12..6.7.......5...4....9..5........67..384....
//2..6.8.414.7...8........3.29...8573..........5...2...4.3.14.58..923..............
//..56....3128.....5..348...9...9.4.67.5..2.9............3..5...8.87...12.6........
//..1...7.....53.9.4..2.86........9.1.435..7........246..6.4...3.72.9..1...9.......

int main(){
	//ios_base::sync_with_stdio(false);
	//cin.tie(0); cout.tie(0);
	vector<vector<vector<char>>> possibilities(9, vector<vector<char>>(9, vector<char>{'1', '2', '3', '4', '5', '6', '7', '8', '9'}));
	vector<vector<char>> Sudoku(9, vector<char>(9,'.'));
	queue<vector<ll>> prejdi;
//	Sudoku = vector<vector<char>>{
//		{'.', '.', '.', '.', '.', '.', '.', '1', '2'},
//		{'.', '.', '.', '.', '.', '.', '.', '.', '3'},
//		{'.', '.', '2', '3', '.', '.', '4', '.', '.'},
//		{'.', '.', '1', '8', '.', '.', '.', '.', '5'},
//		{'.', '6', '.', '.', '7', '.', '8', '.', '.'},
//		{'.', '.', '.', '.', '.', '9', '.', '.', '.'},
//		{'.', '.', '8', '5', '.', '.', '.', '.', '.'},
//		{'9', '.', '.', '.', '4', '.', '5', '.', '.'},
//		{'4', '7', '.', '.', '.', '6', '.', '.', '.'}
//	};
//	Sudoku = vector<vector<char>>{
//		{'.', '5', '.', '.', '.', '2', '9', '3', '.'},
//		{'.', '.', '.', '1', '.', '4', '.', '.', '.'},
//		{'4', '6', '9', '.', '.', '5', '.', '.', '.'},
//		{'3', '.', '.', '7', '5', '.', '.', '.', '1'},
//		{'.', '.', '.', '.', '.', '.', '8', '.', '.'},
//		{'.', '8', '.', '.', '1', '.', '.', '4', '6'},
//		{'1', '3', '.', '.', '.', '.', '5', '2', '.'},
//		{'.', '.', '.', '3', '.', '9', '.', '.', '.'},
//		{'7', '.', '.', '.', '.', '.', '.', '.', '.'}
//	};
//	Sudoku = vector<vector<char>>{
//		{'.', '4', '.', '3', '7', '.', '.', '5', '.'},
//		{'8', '.', '.', '.', '.', '9', '6', '.', '4'},
//		{'9', '6', '.', '.', '.', '.', '.', '.', '.'},
//		{'2', '.', '.', '.', '5', '8', '1', '.', '.'},
//		{'.', '.', '.', '.', '.', '.', '5', '.', '9'},
//		{'.', '3', '4', '2', '.', '.', '.', '.', '.'},
//		{'.', '9', '.', '.', '.', '.', '.', '.', '.'},
//		{'.', '.', '1', '7', '.', '.', '8', '.', '.'},
//		{'.', '.', '.', '.', '4', '.', '.', '3', '.'}
//	};
//	Sudoku = vector<vector<char>>{
//		{'7', '4', '.', '9', '.', '8', '.', '.', '.'},
//		{'.', '.', '.', '.', '.', '.', '.', '.', '6'},
//		{'8', '5', '.', '.', '1', '7', '.', '.', '.'},
//		{'.', '.', '.', '.', '.', '.', '.', '.', '4'},
//		{'.', '2', '.', '4', '.', '.', '.', '.', '.'},
//		{'.', '7', '1', '.', '.', '.', '9', '.', '.'},
//		{'.', '.', '.', '5', '8', '.', '.', '2', '.'},
//		{'.', '6', '2', '.', '7', '9', '8', '.', '.'},
//		{'5', '.', '.', '.', '2', '.', '.', '.', '.'}
//	};
//	Sudoku = vector<vector<char>>{
//		{'.', '.', '.', '4', '2', '3', '.', '.', '.'},
//		{'.', '.', '.', '.', '5', '.', '.', '.', '.'},
//		{'4', '5', '.', '9', '8', '.', '1', '.', '.'},
//		{'.', '3', '.', '.', '.', '.', '7', '.', '.'},
//		{'.', '.', '5', '.', '.', '1', '.', '.', '8'},
//		{'.', '.', '7', '8', '.', '.', '.', '.', '4'},
//		{'5', '.', '.', '.', '9', '.', '.', '.', '.'},
//		{'.', '1', '.', '3', '.', '.', '9', '.', '.'},
//		{'.', '2', '3', '.', '.', '.', '.', '5', '.'}
//	};
//	Sudoku = vector<vector<char>>{
//		{'.', '7', '.', '.', '9', '.', '.', '.', '.'},
//		{'.', '.', '.', '.', '.', '5', '8', '.', '.'},
//		{'.', '.', '9', '3', '2', '.', '1', '.', '6'},
//		{'3', '.', '1', '.', '.', '9', '.', '.', '.'},
//		{'8', '6', '.', '.', '.', '.', '.', '.', '.'},
//		{'7', '.', '.', '1', '.', '.', '.', '3', '5'},
//		{'.', '.', '.', '.', '6', '.', '.', '5', '9'},
//		{'6', '.', '3', '.', '1', '.', '.', '.', '.'},
//		{'.', '.', '.', '.', '.', '8', '.', '.', '.'}
//	};
//	Sudoku = vector<vector<char>>{
//		{'.', '.', '8', '.', '.', '.', '.', '.', '.'},
//		{'.', '.', '.', '.', '.', '.', '5', '3', '4'},
//		{'.', '.', '5', '.', '4', '6', '.', '.', '9'},
//		{'4', '.', '.', '.', '3', '.', '8', '1', '.'},
//		{'.', '.', '.', '1', '6', '.', '.', '5', '.'},
//		{'.', '.', '7', '.', '.', '.', '4', '.', '.'},
//		{'1', '6', '.', '.', '.', '8', '.', '.', '.'},
//		{'8', '.', '3', '.', '5', '.', '.', '.', '.'},
//		{'.', '.', '.', '.', '.', '.', '.', '7', '.'}
//	};
//	Sudoku = vector<vector<char>>{
//		{'.', '.', '1', '.', '.', '.', '.', '4', '9'},
//		{'.', '4', '8', '.', '.', '.', '.', '.', '.'},
//		{'6', '.', '.', '.', '.', '5', '8', '.', '2'},
//		{'2', '.', '.', '9', '.', '.', '.', '.', '.'},
//		{'.', '.', '4', '.', '.', '6', '.', '.', '.'},
//		{'9', '1', '.', '5', '4', '8', '.', '.', '.'},
//		{'.', '7', '.', '.', '.', '9', '6', '.', '.'},
//		{'.', '.', '6', '8', '.', '.', '.', '5', '.'},
//		{'.', '.', '9', '7', '.', '.', '.', '.', '.'}
//	};
//	Sudoku = vector<vector<char>>{
//		{'.', '6', '.', '.', '.', '.', '.', '9', '5'},
//		{'.', '4', '.', '1', '.', '.', '.', '2', '.'},
//		{'.', '7', '.', '2', '8', '.', '1', '.', '.'},
//		{'9', '.', '5', '.', '3', '.', '.', '.', '1'},
//		{'2', '.', '.', '6', '.', '7', '.', '.', '.'},
//		{'.', '.', '.', '.', '5', '.', '.', '.', '4'},
//		{'.', '.', '.', '.', '9', '.', '.', '5', '.'},
//		{'.', '.', '.', '.', '.', '.', '.', '6', '7'},
//		{'.', '.', '3', '8', '4', '.', '.', '.', '.'}
//	};
//	Sudoku = vector<vector<char>>{
//		{'2', '.', '.', '6', '.', '8', '.', '4', '1'},
//		{'4', '.', '7', '.', '.', '.', '8', '.', '.'},
//		{'.', '.', '.', '.', '.', '.', '3', '.', '2'},
//		{'9', '.', '.', '.', '8', '5', '7', '3', '.'},
//		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
//		{'5', '.', '.', '.', '2', '.', '.', '.', '4'},
//		{'.', '3', '.', '1', '4', '.', '5', '8', '.'},
//		{'.', '9', '2', '3', '.', '.', '.', '.', '.'},
//		{'.', '.', '.', '.', '.', '.', '.', '.', '.'}
//	};
//	Sudoku = vector<vector<char>>{
//		{'.', '.', '5', '6', '.', '.', '.', '.', '3'},
//		{'1', '2', '8', '.', '.', '.', '.', '.', '5'},
//		{'.', '.', '3', '4', '8', '.', '.', '.', '9'},
//		{'.', '.', '.', '9', '.', '4', '.', '6', '7'},
//		{'.', '5', '.', '.', '2', '.', '9', '.', '.'},
//		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
//		{'.', '3', '.', '.', '5', '.', '.', '.', '8'},
//		{'.', '8', '7', '.', '.', '.', '1', '2', '.'},
//		{'6', '.', '.', '.', '.', '.', '.', '.', '.'}
//	};
//	Sudoku = vector<vector<char>>{
//		{'.', '.', '1', '.', '.', '.', '7', '.', '.'},
//		{'.', '.', '.', '5', '3', '.', '9', '.', '4'},
//		{'.', '.', '2', '.', '8', '6', '.', '.', '.'},
//		{'.', '.', '.', '.', '.', '9', '.', '1', '.'},
//		{'4', '3', '5', '.', '.', '7', '.', '.', '.'},
//		{'.', '.', '.', '.', '.', '2', '4', '6', '.'},
//		{'.', '6', '.', '4', '.', '.', '.', '3', '.'},
//		{'7', '2', '.', '9', '.', '.', '1', '.', '.'},
//		{'.', '9', '.', '.', '.', '.', '.', '.', '.'}
//	};
	cin >> Sudoku;
	cout << "Sudoku = vector<vector<char>>{" << endl;
	for(ll i = 0; i < 9; i++){
		cout << "{";
		for(ll j = 0; j < 9; j++){
			cout << "'" << Sudoku[i][j] << "'";
			if(j != 8)
				cout << ", ";
		}
		cout << "}";
		if(i != 8)
			cout << ",";
		cout << endl;
	}
	cout << "};" << endl;
	for(ll i = 0; i < Sudoku.size(); i++){
		for(ll j = 0; j < Sudoku[0].size(); j++){
			if(Sudoku[i][j] != '.'){
				prejdi.push(vector<ll>{i, j, Sudoku[i][j]});
				possibilities[i][j] = vector<char>(9, '.');
			}
		}
	}
	auto res = solve(Sudoku, prejdi, possibilities);
	Print_Sudoku(res);
	return 0;
}

